#management.endpoints.web.exposure.include=hawtio,jolokia
hawtio.authenticationEnabled=false
# enable all web endpoints for actuator
# note any properties in this file are loaded before any profile files like
# application-production.properties (when you activate production profile)
management.endpoints.web.exposure.include=*
camel.springboot.name=camel.experiments6
# kafka, or activemq
#experiment6.broker_type=kafka
#experiment1.broker_type=activemq
# Run activemq with docker before starting application.
# docker run -p 61616:61616 -p 8161:8161 rmohr/activemq
# Alternatively you can comment out the 3 spring.activemq lines and
# an in memory activemq will be used.
#spring.activemq.broker-url=tcp://localhost:61616
#spring.activemq.user=admin
#spring.activemq.password=admin
# listeners will use 3 threads by default and can temporarily go up to 10
 #jms.listener.concurrency=3-10
#spring.activemq.broker-url=vm://localhost
# pretty prints json i.e. indents it if i send it to jms or print it to the log for example
# note all jackson serialization features can be enabled/disabled in this way.  Here is a list of them:
#  https://fasterxml.github.io/jackson-databind/javadoc/2.2.0/com/fasterxml/jackson/databind/SerializationFeature.html
spring.jackson.serialization.indent-output=true
# app specific properties
# an example of defining the from clause of a route in the properties file
# To embed other properties in a string you should be able to use either camel specific
# properties {{property}} or spel syntax ${properties:property} and do the from clause like this
# simple(...).getText();
#camel.route.generateRandomData.from=scheduler://generate_data?delay=5s
# kafka endpooints
#camel.route.readFromKafka.from=kafka:person_topic?brokers=localhost:9092&groupId=testinggroup&autoOffsetReset=earliest&consumersCount=1
#camel.route.processData.kafka.to=kafka:person_topic?brokers=localhost:9092
# activemq endpoints
#  Normally you would have to set spring.jms.pub-sub-domain=false (default) when writing to a queue
#  and true when writing to a topic. However, it appears that camel handles that.
#  note below i write to a VirtualTopic and read from a queue.  This is a hybrid that takes the best
#  of topics and queues.  However if both values were either queue or topic that should work too.  I tested
#  with queue only and it worked, but didn't test topic.
#  Note both the necessary topic and queue are automatically created.
#camel.route.readFromActiveMq.from=activemq:queue:Consumer.experiment1.VirtualTopic.randomdata_queue?connectionFactory=#jms
#camel.route.processData.activemq.to=activemq:topic:VirtualTopic.randomdata_queue?connectionFactory=#jms

# cxf route for communicating with publicly available math web service (as of 3/2019)
# Info on the route:
#  cxf - cxf web services component - https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/docs/cxf-component.adoc
#  http://www.dneonline.com/calculator.asmx - url to the soap webservice that will be called
#  serviceClass=org.tempuri.CalculatorSoap - web service class that was generated by the cxf-codegen-plugin in the maven pom.
#    This and other classes are generated as part of the maven build process (i generated them by running: mvn clean package) by
#    looking in the service.wsdl file which I downloaded from here and put in resource/service.wsdl:
#    curl http://www.dneonline.com/calculator.asmx?WSDL > service.wsdl
#    Note, I am not sure but maybe instead of downloading the wsdl you could directly use http://www.dneonline.com/calculator.asmx?WSDL in the pom.xml
#   wsdlURL=service.wsdl = Note resources/service.wsdl is the locaiton in this codebase however when you do a build it is put in
#    target/classes/service.wsdl.  Not path is required to find it here.  Again you may be able to use the actual url of the wsdl
#    here using http://www.dneonline.com/calculator.asmx?WSDL instead of storing the file locally though I didn't try this.
#
camel.route.math.from=cxf://http://www.dneonline.com/calculator.asmx?serviceClass=org.tempuri.CalculatorSoap&wsdlURL=service.wsdl
# If you enable the soap ui mock service and run it then all the rest endpoints can be mocked
#camel.route.math.from=cxf://http://localhost:8088/mockCalculatorSoap?serviceClass=org.tempuri.CalculatorSoap&wsdlURL=service.wsdl

