<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.stevesouza</groupId>
    <artifactId>camel_experiment3_rest</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>camel_experiment3_rest</name>
    <description>Demo camel for Spring Boot demonstrating rest</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <!-- note hawt io doesn't currently work with spring 2.1 so using the previous version -->
        <!--<version>2.1.0.RELEASE</version>-->
        <version>2.0.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <!--<camel.version>2.22.1</camel.version>-->
        <camel.version>2.23.0</camel.version>
        <spring-cloud.version>Finchley.SR2</spring-cloud.version>
    </properties>

    <dependencies>
        <!-- START STANDARD SPRING BOOT LIBRARIES-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-activemq</artifactId>
        </dependency>

        <!-- correlationId/traceId in logs -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
        </dependency>

        <!-- spring metrics and health endpoints-->

        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-springboot</artifactId>
            <version>2.3.0</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>


        <!--kubernetes/openshift ConfigMap support for spring boot properties-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-kubernetes</artifactId>
            <version>0.3.0.RELEASE</version>
        </dependency>
        <!-- END STANDARD SPRING BOOT LIBRARIES-->


        <!-- START camel libraries-->
        <!--always use -starter with spring boot camel p 259 2nd edition-->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-boot-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!--for testing -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-javaconfig-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-metrics-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!--enables json-->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jackson-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!--enables xml-->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jaxb-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jms-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!--This allows us to use the activemq component in routes instead of jms.  According to the camel site-->
        <!--it is more efficient.-->
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-camel</artifactId>
            <version>5.15.6</version>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-kafka-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!--<dependency>-->
        <!--<groupId>org.apache.camel</groupId>-->
        <!--<artifactId>camel-jetty-starter</artifactId>-->
        <!--<version>${camel.version}</version>-->
        <!--</dependency>-->

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-servlet-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!--swagger -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-swagger-java-starter</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!-- xml processing -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xstream</artifactId>
            <version>${camel.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jacksonxml</artifactId>
            <version>${camel.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xmljson</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!-- xml validation -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-msv</artifactId>
            <version>${camel.version}</version>
        </dependency>

        <!--camel test -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test-spring</artifactId>
            <version>${camel.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- END camel libraries-->


        <!-- START other standard libraries of common use-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- easily generate test data even with complex object webs.  good for actual code when stubbing a controller -->
        <dependency>
            <groupId>io.github.benas</groupId>
            <artifactId>random-beans</artifactId>
            <version>3.7.0</version>
        </dependency>

        <dependency>
            <groupId>io.github.benas</groupId>
            <artifactId>random-beans-validation</artifactId>
            <version>3.7.0</version>
        </dependency>

        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>2.3.2</version>
        </dependency>


        <!--<dependency>-->
        <!--<groupId>org.apache.activemq</groupId>-->
        <!--<artifactId>activemq-broker</artifactId>-->
        <!--</dependency>-->

        <!--<dependency>-->
        <!--<groupId>org.apache.activemq</groupId>-->
        <!--<artifactId>activemq-broker</artifactId>-->
        <!--</dependency>-->
        <!-- END other standard libraries of common use-->

        <!-- **** START XML processing libraries-->

        <!--xml processing-->
        <dependency>
            <groupId>xom</groupId>
            <artifactId>xom</artifactId>
            <version>1.2.5</version>
        </dependency>

        <!-- END XML processing libraries-->

        <!--test libraries-->
        <!-- bean comparisons like from entity to vo -->
        <dependency>
            <groupId>com.shazam</groupId>
            <artifactId>shazamcrest</artifactId>
            <version>0.11</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>1.5.0</version>
        </dependency>

        <!--log to papertrail.  note this is only one way to log to papertrail. others include having docker itself write to-->
        <!--papertrail with: docker run &#45;&#45;restart=always -d -v=/var/run/docker.sock:/var/run/docker.sock gliderlabs/logspout syslog+tls://logs7.papertrailapp.com:20749-->

    <dependency>
        <groupId>com.papertrailapp</groupId>
        <artifactId>logback-syslog4j</artifactId>
        <version>1.0.0</version>
    </dependency>

</dependencies>

<!--used for spring cloud and in particular for this project to include spring cloud sleuth -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--note this is an openshift plugin, though I haven't been able to get it to works, so commenting it out and moving back to the-->
            <!--docker plugin -->
            <!--<plugin>-->
            <!--<groupId>io.fabric8</groupId>-->
            <!--<artifactId>fabric8-maven-plugin</artifactId>-->
            <!--<version>3.5.41</version>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<goals>-->
            <!--<goal>resource</goal>-->
            <!--<goal>build</goal>-->
            <!--<goal>deploy</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--</executions>-->

            <!--</plugin>-->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.28.0</version>
                <configuration>
                    <images>
                        <image>
                            <!--g=groupid, a=artifact, l=version-->
                            <name>%g/%a:%l</name>    
                            <build>
                                <from>openjdk:8</from>     
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>     
                                </assembly>
                                <!--override application.properties when running app from a container-->
                                <env>
                                    <spring.data.mongodb.host>172.17.0.3</spring.data.mongodb.host>
                                </env>
                                <cmd>
                                    java -jar maven/${project.artifactId}-${project.version}.jar     
                                </cmd>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>