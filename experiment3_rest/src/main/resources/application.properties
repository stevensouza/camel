#management.endpoints.web.exposure.include=hawtio,jolokia
hawtio.authenticationEnabled=false
endpoints.jolokia.sensitive = false

# enable all web endpoints for actuator
# note any properties in this file are loaded before any profile files like
# application-production.properties (when you activate production profile)
management.endpoints.web.exposure.include=*

# Run activemq with docker before starting application.
# docker run -p 61616:61616 -p 8161:8161 rmohr/activemq
# Alternatively you can comment out the 3 spring.activemq lines and
# an in memory activemq will be used.
#spring.activemq.broker-url=tcp://localhost:61616
#spring.activemq.user=admin
#spring.activemq.password=admin
# listeners will use 3 threads by default and can temporarily go up to 10
#jms.listener.concurrency=3-10
#spring.activemq.broker-url=vm://localhost
# pretty prints json i.e. indents it if i send it to jms or print it to the log for example
# note all jackson serialization features can be enabled/disabled in this way.  Here is a list of them:
#  https://fasterxml.github.io/jackson-databind/javadoc/2.2.0/com/fasterxml/jackson/databind/SerializationFeature.html
spring.jackson.serialization.indent-output=true
# app specific properties
# an example of defining the from clause of a route in the properties file
# To embed other properties in a string you should be able to use either camel specific
# properties {{property}} or spel syntax ${properties:property} and do the from clause like this
# simple(...).getText();
#camel.route.generateRandomData.from=scheduler://generate_data?delay=5s
# kafka endpooints
#camel.route.readFromKafka.from=kafka:person_topic?brokers=localhost:9092&groupId=testinggroup&autoOffsetReset=earliest&consumersCount=1
#camel.route.processData.kafka.to=kafka:person_topic?brokers=localhost:9092
# activemq endpoints
#  Normally you would have to set spring.jms.pub-sub-domain=false (default) when writing to a queue
#  and true when writing to a topic. However, it appears that camel handles that.
#  note below i write to a VirtualTopic and read from a queue.  This is a hybrid that takes the best
#  of topics and queues.  However if both values were either queue or topic that should work too.  I tested
#  with queue only and it worked, but didn't test topic.
#  Note both the necessary topic and queue are automatically created.
#camel.route.readFromActiveMq.from=activemq:queue:Consumer.experiment1.VirtualTopic.randomdata_queue?connectionFactory=#jms
#camel.route.processData.activemq.to=activemq:topic:VirtualTopic.randomdata_queue?connectionFactory=#jms
# see here for properties - https://github.com/apache/camel/blob/master/camel-core/src/main/docs/rest-dsl.adoc
# and here for spring boot properties https://github.com/apache/camel/blob/47447cbaecb716b9184eb07c137f87e80538f6cc/examples/camel-example-spring-boot-rest-swagger/src/main/resources/application.properties
# servlet component properties
# documenation and properties including spring boot ones
# https://github.com/apache/camel/blob/master/components/camel-servlet/src/main/docs/servlet-component.adoc
# you can see the following in log line:
#   2018-12-22 10:28:06.634  INFO 17446 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Servlet CamelServlet mapped to [/rest/*]
camel.component.servlet.mapping.context-path=/rest/*
camel.rest.binding-mode=json_xml
camel.rest.data-format-property.prettyPrint=true
# Normally log messages are sent to the console, but if you want to write them to a file too then set this following
#  property
#logging.path=/Users/stevesouza/gitrepo/camel
# enable tomcat web access logs
server.tomcat.accesslog.enabled=true
server.tomcat.basedir=logs
# not sure what is different between these 2...
spring.application.name=experiment3_rest
camel.springboot.name=camel.experiments3
